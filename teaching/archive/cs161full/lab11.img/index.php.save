<?php
/** lab config */
require("../course_cfg.php");
require("lab_cfg.php");
require($cfg['includes_dir']."/course_lab_header.php");
require($cfg['includes_dir']."/highlight.php");
?>

<h3>Overview</h3>
<p>
David loves listening to crickets chirp when he's telling jokes in class. Over 
time he  observed that, as the temperature cooled in his classroom, the crickets tend 
to chirp slower. Conversely, when temperature rose, crickets in general 
chirped faster. On a hunch, he hypothesized that the crickets' chirp 
rate might  be related to the temperature. On various occasions, he 
recorded the chirp rate and the ambient temperature, shown in 
the table below. This is a real data set from: The Song 
of Insects by G.W. Pierce. Harvard College Press.
</p>
<center>
<table>
<tr>
<td>
	<table style="padding: 0px; font-size: 12px">
	<tr style="background-color: #eeeeee"><td>Chirps per sec</td><td>Temp (F)
	<tr><td>20</td><td>88.6</td></tr>
	<tr><td>16</td><td>71.6</td></tr>
	<tr><td>19.8</td><td>93.3</td></tr>
	<tr><td>18.4</td><td>84.3</td></tr>
	<tr><td>17.1</td><td>80.6</td></tr>
	<tr><td>15.5</td><td>75.2</td></tr>
	<tr><td>14.7</td><td>69.7</td></tr>
	<tr><td>15.7</td><td>71.6</td></tr>
	<tr><td>15.4</td><td>69.4</td></tr>
	<tr><td>16.3</td><td>83.3</td></tr>
	<tr><td>15</td><td>79.6</td></tr>
	<tr><td>17.2</td><td>82.6</td></tr>
	<tr><td>16</td><td>80.6</td></tr>
	<tr><td>17</td><td>83.5</td></tr>
	<tr><td>14.4</td><td>76.3</td></tr>
	</table>
</td>
<td>
&nbsp;&nbsp;
</td>
<td>
	<img width="400px" src="figures/lab8_regression.png" />	
</td>
<!--
<td>
	<img width="300" src="figures/cricket.gif" />	
</td>
--></tr>
</table>
</center>

After modeling this data using a statistical technique called 
<i>linear regression</i>, David concludes that there indeed exists 
a correlation between chirp rate and temperature. Linear regression 
is the process of solving for the line that best fits the observed 
data. As seen in the right-hand plot, the red line 
defined by the linear equation 
<img height="16pt" style="vertical-align: middle" src="figures/lab8_crickets_eq1.png"/>
was found to be the ``best fit'' for the observed points. In 
other words, the combined distance (or error) from all these 
points to this line is the minimized. One cool application is 
that David can now use this  equation to estimate the 
temperature
<img height="16pt" style="vertical-align: middle" src="figures/lab8_crickets_eq2.png"/>
when he hears a cricket chirping at a given rate <i>x</i>. 

In this lab, we'll implement one of the most powerful and pervasive
statistical techniques, <i>Linear Regression</i>.
</p>
<p>
  This lab should be completed in pairs. You will need to 
  find a different partner than you had for the last lab. 
  Remember to switch off who is driving and who is navigating!
</p>

<h3>Objectives</h3>
<ul>
	<li>Practice with ArrayList</li>
	<li>More practice with loops and conditionals</li>
</ul>

<h3>Required Files</h3>
The following file(s) have been provided for this lab.
<ul>
<li><a href="Lab8_LinearRegression.zip">Lab8_LinearRegression.zip</a></li>
</ul>

<h3>Instructions</h3>
<p>
Download the BlueJ project from the above link. After you unzip it into your working directory,
navigate into the <code>Lab8_LinearRegression</code> folder. Inside, you will see a single
<code>LinearRegression</code> class.
</p>

<h3>Part 1: The Observation Class</h3>
<p>
Study the cricket data above. Notice that every observation 
is an <code>x</code> (<i>e.g.</i>, chirp rate) and <code>y</code> (<i>e.g.</i>, temperature)
pair. Create a class named <code>Observation</code>. 
</p>
<ol>
	<li>
	<p>
	This class should have two fields, both <code>double</code>, for
	the <code>x</code> and <code>y</code> values.
	</p>
	</li>
	<li>
	<p>
	Create a constructor that inputs two <code>double</code>s. Assign
	these values to the <code>x</code> and <code>y</code> fields, respectively.
	</p>
	</li>
	<li>
	<p>
	Write getter methods called <code>getX()</code> and <code>getY()</code> that returns a 
	the value of <code>x</code> and <code>y</code>, respectively.
	</p>
	</li>
	<li>
	<p>
	Write setter methods called <code>setX()</code> and <code>setY()</code> that  
	assigns the values of <code>x</code> and <code>y</code>, respectively.
	</p>
	</li>
	<li>
	<p>
	Write a method called <code>toString</code> that returns a String
	<code>"[x,y]"</code>, where <code>x</code> and <code>y</code> are 
	the fields' values.
	</p>
	</li>
	<li>
	<p>
	Test your class inside Code Pad to ensure that everything works:
        <pre><?php echo highlightIt('code/testObs.txt'); ?></pre>	
	<b>Time to switch partners</b>
	</p>
	</li>
</ol>


<h3>Part 2: Data Management</h3>
<p>
Open the <code>LinearRegression</code> class. First, we'll write the components
necessary for storing and managing data. This class must store multiple <code>Observation</code> elements.
</p>
<ol>
	<li>
	<p>
	<b>Fields:</b> The data we gather are <code>Observation</code> objects and must be stored in 
	an <code>ArrayList</code> field. To use this class, we need to first
	import it:
        <pre><?php echo highlightIt('code/arrayListImport.java'); ?></pre>	
	Recall that to declare an <code>ArrayList</code>, we use the <b>diamond notation</b>:
        <pre><?php echo highlightIt('code/arrayListDecl.java'); ?></pre>
	where <code>DataType</code> is a class.
<!--
	<i>But we're storing doubles, which are
	primitive types...</i>
	</p>
	<ul>
		<li>
			Indeed, the following declaration will result in a compiler error:
		        <pre><?php echo highlightIt('code/arrayListDecl2.java'); ?></pre>
		</li>
		<li>
		<p>
			Luckily, Java provides <b>wrapper classes</b> 
			(<i>e.g.</i>, <code>Double</code>, <code>Integer</code>, <code>Boolean</code>, etc.) for exactly
			this type of scenario, when an object is required to represent a 
			primitive. You should take a look at the API for <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Double.html">Double</a>.
		</p>
		</li>
	</ul>
	</li>
-->
	<li>
	<p>
		<b>Constructor:</b> Implement a default constructor that instantiates
		your <code>ArrayList</code>. The syntax:
	        <pre><?php echo highlightIt('code/arrayListInst.java'); ?></pre>
		instantiates an empty <code>ArrayList</code> and 
		<code>listName</code> is assigned a reference to it.
	</p>
	</li>
	<li>
	<p>
		Now you're ready to write the following data management methods.
		<ul>
			<li>
			<p>
			Write a method called <code>addObservation</code> that
			inputs a reference to an <code>Observation</code> object and adds it to the end of your collection.
			</p>
			</li>
			<li>
			<p>
			Write a method called <code>removeObservation</code> 
			that removes the <code>Observation</code> from your
			collection  positioned 
			at the given integer <code>index</code>.
			The method should 
			not attempt to remove an element if the <code>index</code>
			is out of range. Instead, it should print an error to the screen.
			</p>
			</li>
			<li>
			<p>
			Write a method called <code>replaceObservation</code> that
			inputs an integer <code>index</code>
			and a reference to an <code>Observation</code> object. This
			method should replace the element located
			at the indexed position with the given <code>Observation</code>.
			The method should 
			not attempt to replace an element if the <code>index</code>
			is out of range. Instead, it should print an error to the screen.
			</p>
			</li>
			<li>
			<p>
			Write a method called <code>showObservations</code> that
			prints all observations in sequence to the screen. If there are
			no observations stored, it should print a message saying that.
			</p>
			</li>
		</ul>
	</p>
	</li>
	<li>
	<p>
	Test your code inside code pad:
        <pre><?php echo highlightIt('code/testObs2.txt'); ?></pre>
	</p>
	<p>
	Check in with us when you're done. Now's a good time to switch partners.
	</p>
	</li>
</ol>

<h3>Part 3: Linear Modeling</h3>
<p>
The prediction model is defined by the linear equation
<img height="16pt" style="vertical-align: middle" src="figures/lab8_crickets_eq3.png"/>
where <i>m</i> is the slope and <i>b</i> is the Y-intercept. You will need to implement the
following inside the <code>LinearRegression</code> class:
</p>
<ol>
	<li>
	<p>
	Write a method named <code>getXMean</code> that inputs nothing and returns the
	average of all the x values in 
	</p>
	</li>
	<li>
	<p>
	Things worth considering:
	<ul>
		<li><p>For convenience, let's call the lines that move vertically along the <code>width</code> a <b>zig line</b>, and the longer lines that sweep back across a <b>zag line</b></p></li>
		<li><p>In the picture above, the turtle was initially facing east. Therefore, when I call this method, I expect that the zigzag will be drawn horizontally, and to the east. But notice how the first zig-line is actually vertical. You shouldn't assume that the turtle will always be facing east, but this still means you need to change the turtle's angle before you do any drawing at all. (The “zig-zagging” should take the turtle in the same direction it was facing when the method was called).</p></li>
		<li><p>Next, you need to determine the length of the zag-lines, as well as the angle of your turns. (Hint: These sawtooth shapes sure remind me of isosceles right triangles)</p></li>
		<li><p>Think about the loop condition, which is related to how much you should draw per iteration. A single zig-line plus zag-line combination (looks like a tooth) appears to be the minimally repeated pattern.</p></li>
		<li><p>Make sure your ziglines and zaglines are alternating colors.</p></li>
	</ul>
	</p>
	</li>
	<li>
	<p>
	Check in with us when you're done. Now's a good time to switch partners.
	</p>
	</li>
</ol>
<h3>Part 3: Making Pretty Patterns</h3>
<p>
It's amazing how many cool patterns we can now draw with just the <code>drawPolygon</code>
and <code>drawZigzag</code> method implemented. Your task is to create your very own pattern by
combining <i>(you guessed it)</i> loops and those previous methods you wrote. 
</p>

<h4>Creating Your Own Pattern</h4>
<ol>
	<li>
	<p>
	<b>You are not required</b> to draw the pattern below, but use it as inspiration. Check out this nested polygon we made 
	through repeated calls to <code>drawPolygon</code>.<br/>
	<center><img src="figures/lab6_turtle_polyPattern.png" width="200px" border="1" /></center><br/>
	The algorithm is surprisingly simple. This pattern contains five nested polygons, each one is 20% smaller than 
	the polygon surrounding it.
	Here's the idea: To create this pattern, we'll first draw a polygon with <code>sideLength</code>-long
	edges. After the first one is complete, the <code>sideLength</code> should be shrunken by 20%.
	Repeat this process five times. Each time through the loop, check if you're in an odd iteration, or an even
	iteration. Depending on this check, set the pen's color to either blue or red.
	</p>
	</li>
	<li>
	<p>
	Return to the class file, and create a new
	method called <code>drawMyPattern</code>, which returns nothing and inputs nothing.
	Your task is to create a new pattern by repeatedly calling the methods we've written.
	Your method should conform to the following criteria:
	</p>
	<ul>
		<li>
		<p>
		You must use <i>at least</i> one loop.
		</p>
		</li>
		<li>
		<p>
		You must incorporate <i>at least</i> two colors.
		</p>
		</li>
	</ul>
	</li>
    	<li>
	<p>
	You are encouraged to be creative, but to give you some ideas on expectations,
	here are some patterns of sufficient difficulty that you can make:
	<ul>
		<li>
		<p>
		Nested polygons like the one shown above, except you ask the user
		for the number of polygons you need to nest (then compute the shrinkage factor).
		Create a method that returns a random color and use it.
		</p>
		</li>
		<li>
		<p>
		A wall (several rows or columns) of zigzags, 
		changing colors every row or column.
		</p>
		</li>
	</ul>
	
        </p>
	</li>
</ol>


<h3>Part 4: Optional Extensions</h3>
These are not required, and will not fetch extra credit, but doing these is good for your health.
<ol>
	<li>
	<p>
	<b>Dashed Lines</b>: All the drawings so far have used solid lines. The first new we create will draw dashed lines,
	like the one shown below. Name this method <code>drawDashedLine</code>, that takes as input
	two double arguments and a String. The first argument is <code>length</code>, which specifies the length of
	the dashed line to be drawn. The second argument is <code>dashLength</code>, which is the length
	of each dash interval (see below for illustration). The final parameter is the color of the dashed line.
	<center><img src="figures/lab6_turtle_dash.png" width="400px" border="1" /></center>
	</p>
	<p>
	To build intuition, try coding this up sequentially (without loops) to
	reveal the repetitive structure. There are 
	a couple things worth noting:
	<ul>
		<li><p>You'll need to lift and lower the pen repeatedly to implement this algorthm.</p></li>
		<li><p>Think about the loop condition. When do you stop the <i>pen-up/down-move-forward</i> cycle?</p></li>
		<li><p>Each dash or non-dash movement is repetitive, but how do know when to put the pen down/up? Notice that this action alternates... sounds like we want to do something on the <b>odd iterations</b> of the loop, and do something else on the <b>even iterations</b> of the loop. There's got to be an easy way to check if a number is even or odd, isn't there?</p></li>
		<li><p>If the <code>dashLength</code> is input as a zero or negative number, you should draw a solid line.</p></li>
	</ul>
	</p>
	</li>
</ol>
<?php
require($cfg['includes_dir']."/course_lab_footer.php");
?>
